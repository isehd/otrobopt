{{ objname }} distribution
{{ underline }}{{ underline }}

.. plot::
    :include-source: False

    import openturns as ot
    import otrobopt
    from matplotlib import pyplot as plt
    from openturns.viewer import View

    thetaDist = ot.Normal(2.0, 0.1)
    if otrobopt.{{ objname }}().__class__.__name__=='WorstCaseMeasure':
        thetaDist = ot.Uniform(-1.0, 3.0)

    f_base = ot.NumericalMathFunction(['x', 'theta'], ['y'], ['x*theta'])
    f = ot.NumericalMathFunction(f_base, [1], thetaDist.getMean())

    if otrobopt.{{ objname }}().__class__.__name__=='JointChanceMeasure':
        #thetaDist = ot.Normal(1.0, 1.0)
        measure = otrobopt.JointChanceMeasure(f, thetaDist, ot.Less(), 0.95)
    elif otrobopt.{{ objname }}().__class__.__name__=='IndividualChanceMeasure':
        #thetaDist = ot.Normal(1.0, 1.0)
        measure = otrobopt.IndividualChanceMeasure(f,thetaDist, ot.Less(), [0.95])
    elif otrobopt.{{ objname }}().__class__.__name__=='MeanStandardDeviationTradeoffMeasure':
        measure =  otrobopt.MeanStandardDeviationTradeoffMeasure(f, thetaDist, [0.4])
    elif otrobopt.{{ objname }}().__class__.__name__=='QuantileMeasure':
        measure =  otrobopt.QuantileMeasure(f, thetaDist, 0.8)
    else:
        measure = otrobopt.{{ objname }}(f, thetaDist)

    N = 10
    experiment = ot.LHSExperiment(N)
    factory = otrobopt.MeasureFactory(measure, experiment)
    discretizedMeasure = factory.build()

    continuous_measure = otrobopt.MeasureFunction(measure)
    discretized_measure = otrobopt.MeasureFunction(discretizedMeasure)

    x_min = -2.0
    x_max = 2.0

    parametric_graph = f.draw(x_min, x_max)
    continuous_graph = continuous_measure.draw(x_min, x_max)
    discretized_graph = discretized_measure.draw(x_min, x_max)

    parametric_curve = parametric_graph.getDrawable(0)
    continuous_curve = continuous_graph.getDrawable(0)
    continuous_curve.setColor('red')
    discretized_curve = discretized_graph.getDrawable(0)

    left_graph = ot.Graph()
    left_graph.setGrid(True)
    left_graph.add(parametric_curve)
    left_graph.add(continuous_curve)

    right_graph = ot.Graph()
    right_graph.setGrid(True)
    right_graph.add(continuous_curve)
    right_graph.add(discretized_curve)

    fig = plt.figure(figsize=(10, 4))
    plt.suptitle(str(measure))
    left_axis = fig.add_subplot(121)
    right_axis = fig.add_subplot(122)

    View(left_graph, figure=fig, axes=[left_axis], add_legend=False)
    View(right_graph, figure=fig, axes=[right_axis], add_legend=False)


.. currentmodule:: {{ module }}

.. autoclass:: {{ objname }}

   {% block methods %}
   .. automethod:: __init__
   {% endblock %}
