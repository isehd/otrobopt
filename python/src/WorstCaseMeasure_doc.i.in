%feature("docstring") OTROBOPT::WorstCaseMeasure
"Worst case measure function.

.. math::

    M_{f, \theta}(x) = Inf_{\Omega \theta} f(x, \theta)

Parameters
----------
distribution : :py:class:`openturns.Distribution`
    Distribution of parameters
function : :py:class:`openturns.NumericalMathFunction`
    Parametric function
isMinimization : bool (optional, defaults to `True`)
    Whether the worst case is the minimization of the criteria

Examples
--------
>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f = ot.NumericalMathFunction(['x1', 'p1'], ['y1'], ['x1*p1'])
>>> parametric = ot.NumericalMathFunction(f, [1], [0., 1.])
>>> measure = otrobopt.WorstCaseMeasure(thetaDist, parametric, False)"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::setMinimization
"Minimization flag accessor.

Parameters
----------
minimization : bool
    Whether the problem is a minimization."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::isMinimization
"Minimization flag accessor.

Returns
-------
minimization : bool
    Whether the problem is a minimization."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::setOptimizationSolver
"Optimization solver accessor.

Parameters
----------
solver : :py:class:`openturns.OptimizationSolver`
    Optimization solver"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::getOptimizationSolver
"Optimization solver accessor.

Returns
-------
solver : :py:class:`openturns.OptimizationSolver`
    Optimization solver"
