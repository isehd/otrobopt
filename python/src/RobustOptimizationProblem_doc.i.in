%feature("docstring") OTROBOPT::RobustOptimizationProblem
"Robust optimization problem.

Must consist at least of one :class:`~otrobopt.MeasureEvaluation`, either on
the objective or the constraint, else a regular
:class:`openturns.OptimizationProblem` can be used.

Parameters
----------
robustnessMeasure : :class:`~otrobopt.MeasureEvaluation`
    Measure function on the objective.
reliabilityMeasure : :class:`~otrobopt.MeasureEvaluation`
    Mesure function on the constraints

Examples
--------

Pure robustness problem:

>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f = ot.NumericalMathFunction(['x1', 'p1'], ['y1'], ['x1*p1'])
>>> parametric = ot.NumericalMathFunction(f, [1], [1.0])
>>> robustnessMeasure = otrobopt.MeanMeasure(thetaDist, parametric)
>>> problem = RobustOptimizationProblem()
>>> problem.setRobustnessMeasure(robustnessMeasure)


Pure reliability problem:

>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f = ot.NumericalMathFunction(['x1', 'p1'], ['y1'], ['x1*p1'])
>>> parametric = ot.NumericalMathFunction(f, [1], [1.0])
>>> reliabilityMeasure = otrobopt.VarianceMeasure(thetaDist, parametric)
>>> problem = RobustOptimizationProblem()
>>> problem.setReliabilityMeasure(reliabilityMeasure)


Robustness & reliability problem:

>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f = ot.NumericalMathFunction(['x1', 'p1'], ['y1'], ['x1*p1'])
>>> parametric = ot.NumericalMathFunction(f, [1], [1.0])
>>> robustnessMeasure = otrobopt.MeanMeasure(thetaDist, parametric)
>>> reliabilityMeasure = otrobopt.VarianceMeasure(thetaDist, parametric)
>>> problem = RobustOptimizationProblem(robustnessMeasure, reliabilityMeasure)"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::setRobustnessMeasure
"Robustness measure accessor.

The measure on associated to the objective function

Parameters
----------
robustnessMeasure : :class:`~otrobopt.MeasureEvaluation`
    Measure function on the objective."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::getRobustnessMeasure
"Robustness measure accessor.

The measure on associated to the objective function

Returns
-------
robustnessMeasure : :class:`~otrobopt.MeasureEvaluation`
    Measure function on the objective."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::hasRobustnessMeasure
"Robustness measure flag accessor.

If no robustness measure was set, the problem should have a
reliability measure.
The objective is deduced from the robustness measure.

Returns
-------
hasReliabilityMeasure : bool
    Whether a robustness measure was set"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::setReliabilityMeasure
"Reliability measure accessor.

The measure on associated to the constraint

Parameters
----------
reliabilityMeasure : :class:`~otrobopt.MeasureEvaluation`
    Mesure function on the constraints"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::getReliabilityMeasure
"Reliability measure accessor.

The measure on associated to the constraint

Returns
-------
reliabilityMeasure : :class:`~otrobopt.MeasureEvaluation`
    Mesure function on the constraints"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::RobustOptimizationProblem::hasReliabilityMeasure
"Reliability measure flag accessor.

If no reliability measure was set, the problem should have a
robustness measure.
The constraints are deduced from the reliability measure.

Returns
-------
hasReliabilityMeasure : bool
    Whether a reliability measure was set"
