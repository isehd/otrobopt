%feature("docstring") OTROBOPT::WorstCaseMeasure
"Worst case measure function.

It is built from a parametric function :math:`f` and a distribution :math:`\mathcal{D}` of density function :math:`p`.

In case of a continuous distribution:

.. math::

    M_{f, \mathcal{D}}(x) = \inf_{\theta \in Supp(\mathcal{D})} f(x, \theta)

In case of a discrete distribution:

.. math::

    M_{f, \mathcal{D}}(x) = \inf_{\theta_i \in Supp(\mathcal{D})} f(x, \theta_i)


Parameters
----------
function : :py:class:`openturns.NumericalMathFunction`
    Parametric function
distribution : :py:class:`openturns.Distribution`
    Distribution of parameters
isMinimization : bool (optional, defaults to `True`)
    Whether the worst case is the minimization of the criteria

Examples
--------
>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f_base = ot.NumericalMathFunction(['x', 'theta'], ['y'], ['x*theta'])
>>> f = ot.NumericalMathFunction(f_base, [1], [1.0])
>>> measure = otrobopt.WorstCaseMeasure(f, thetaDist, False)"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::setMinimization
"Minimization flag accessor.

Parameters
----------
minimization : bool
    Whether the problem is a minimization."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::isMinimization
"Minimization flag accessor.

Returns
-------
minimization : bool
    Whether the problem is a minimization."

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::setOptimizationSolver
"Optimization solver accessor.

Parameters
----------
solver : :py:class:`openturns.OptimizationSolver`
    Optimization solver"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::WorstCaseMeasure::getOptimizationSolver
"Optimization solver accessor.

Returns
-------
solver : :py:class:`openturns.OptimizationSolver`
    Optimization solver"
