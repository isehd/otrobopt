%feature("docstring") OTROBOPT::MeasureFactory
"Discretize a measure function.

It consists in replacing the distribution :math:`\mathcal{D}` of the measure by a discrete
approximation.

.. math::

    \mathcal{D} \rightarrow \sum_{i=1}^N \omega_i \delta_{\theta_i}


Where :math:`\delta_{\theta_i}` is the Dirac measure at :math:`\theta_i`.

Parameters
----------
measure : :class:`~otrobopt.MeasureEvaluation`
    Measure function
experiment : :py:class:`openturns.WeightedExperiment`
    Parameters design of experiment

Examples
--------
First define a measure:

>>> import openturns as ot
>>> import otrobopt
>>> thetaDist = ot.Normal(2.0, 0.1)
>>> f_base = ot.NumericalMathFunction(['x', 'theta'], ['y'], ['x*theta'])
>>> f = ot.NumericalMathFunction(f_base, [1], [1.0])
>>> measure = otrobopt.MeanMeasure(f, thetaDist)


Then discretize it:

>>> N = 10
>>> experiment = ot.LHSExperiment(N)
>>> factory = otrobopt.MeasureFactory(measure, experiment)
>>> discretizedMeasure = factory.build()"

// ---------------------------------------------------------------------

%feature("docstring") OTROBOPT::MeasureFactory::build
"Discretize a measure.

Returns
-------
measure : :class:`~otrobopt.MeasureEvaluation`
    Discretized measure function"
